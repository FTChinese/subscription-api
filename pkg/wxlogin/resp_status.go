package wxlogin

import (
	"fmt"
	"github.com/FTChinese/go-rest/render"

	"github.com/FTChinese/go-rest/view"
)

// RespStatus is used to parse wechat error response.
// Wechat API's error response is mixed with normal response.
// errcode: 40163, errmsg: "code been used"
// errcode: 41002, errmsg: "appid missing";
// errcode: 42001, errmsg: "access_token expired";
// errcode: 40029, errmsg: "invalid code";
// errcode: 40030, errmsg: "invalid refresh_token"
// errcode: 40003, errmsg: "invalid openid"
type RespStatus struct {
	Code    int64  `json:"errcode"`
	Message string `json:"errmsg"`
}

// ToString creates a human readable message of the RespStatus.
// Do not use the convention String() method because we do not want
// it to be used in printing and log.
func (s RespStatus) ToString() string {
	return fmt.Sprintf("%d: %s", s.Code, s.Message)
}

// HasError tests if wechat response contains error.
func (s RespStatus) HasError() bool {
	return s.Code != 0
}

// BuildReason turns Wechat error response into our standard restful response.
// This is used to tell client an error occurred and the request cannot be handled, like OAuth code is invalid, refresh_token expired, opend id is invalid.
// Errors like appid missing is not caused by client, and should not be included.
// Deprecated
func (s RespStatus) BuildReason() *view.Reason {
	r := view.NewReason()

	switch s.Code {

	// OAuth code is either not generated by this Wechat app,
	// or is expired.
	// Client should tell user to try to relaunch the authorize process.
	case 40029:
		r.Field = "code"
		r.Code = view.CodeInvalid
		r.SetMessage(s.Message)
		return r

	// If client received this reponse, it should ask user to re-authorize.
	case 40030:
		r.Field = "refresh_token"
		r.Code = view.CodeInvalid
		r.SetMessage(s.Message)
		return r

	// If client recieved this response, it should ask user to re-authorize.
	case 40003:
		r.Field = "openId"
		r.Code = view.CodeInvalid
		r.SetMessage(s.Message)
		return r

	// Return nil does not mean no error occurred.
	default:
		r.Code = fmt.Sprintf("%d", s.Code)
		r.SetMessage(s.Message)
		return r
	}
}

func (s RespStatus) GetInvalidity() *render.ValidationError {
	switch s.Code {

	// OAuth code is either not generated by this Wechat app,
	// or is expired.
	// Client should tell user to try to relaunch the authorize process.
	case 40029:
		return &render.ValidationError{
			Message: s.Message,
			Field:   "code",
			Code:    render.CodeInvalid,
		}

	// If client received this response, it should ask user to re-authorize.
	case 40030:
		return &render.ValidationError{
			Message: s.Message,
			Field:   "refresh_token",
			Code:    render.CodeInvalid,
		}

	// If client received this response, it should ask user to re-authorize.
	case 40003:
		return &render.ValidationError{
			Message: "s.Message",
			Field:   "openId",
			Code:    render.CodeInvalid,
		}

	// We don't know the exact error.
	default:
		return &render.ValidationError{
			Message: s.Message,
			Field:   fmt.Sprintf("%d", s.Code),
			Code:    render.CodeInvalid,
		}
	}
}
