package stripe

import (
	"fmt"
	"github.com/FTChinese/go-rest/render"
	"github.com/FTChinese/subscription-api/lib/validator"
	"github.com/FTChinese/subscription-api/pkg/price"
	"github.com/FTChinese/subscription-api/pkg/reader"
	"github.com/guregu/null"
	stripeSdk "github.com/stripe/stripe-go/v72"
)

// SubsParams is the request body to create a new subscription
// or update an existing one.
type SubsParams struct {
	PriceID             string      `json:"priceId"`
	IntroductoryPriceID null.String `json:"introductoryPriceId"`
	CouponID            null.String `json:"coupon"`
	// https://stripe.com/docs/api/subscriptions/create#create_subscription-default_payment_method
	DefaultPaymentMethod null.String `json:"defaultPaymentMethod"`
	// Generated by client. This is optional.
	// It exists to prevent duplicate subscription.
	IdempotencyKey string `json:"idempotency"`
}

// Validate checks if customer and idempotency fields are set.
func (p SubsParams) Validate() *render.ValidationError {
	return validator.New("priceId").Required().Validate(p.PriceID)
}

// BuildCartItem constructs a Stripe checkout item
// from cached data.
func (p SubsParams) BuildCartItem(prices map[string]price.StripePrice) (reader.CartItemStripe, error) {
	recurring, ok := prices[p.PriceID]
	if !ok {
		return reader.CartItemStripe{}, fmt.Errorf("stripe price %s not found", p.PriceID)
	}

	var intro price.StripePrice
	if p.IntroductoryPriceID.Valid {
		intro, ok = prices[p.IntroductoryPriceID.String]
		if !ok {
			return reader.CartItemStripe{}, fmt.Errorf("stripe price %s not found", p.IntroductoryPriceID.String)
		}
	}

	return reader.CartItemStripe{
		Recurring:    recurring,
		Introductory: intro,
	}, nil
}

func (p SubsParams) NewSubParams(cusID string, ci reader.CartItemStripe) *stripeSdk.SubscriptionParams {
	params := &stripeSdk.SubscriptionParams{
		Customer:          stripeSdk.String(cusID),
		CancelAtPeriodEnd: stripeSdk.Bool(false),
		Items: []*stripeSdk.SubscriptionItemsParams{
			{
				Price: stripeSdk.String(ci.Recurring.ID),
			},
		},
	}

	// If default payment method is provided, use it;
	// otherwise set payment behavior to incomplete.
	if p.DefaultPaymentMethod.Valid {
		params.DefaultPaymentMethod = stripeSdk.String(p.DefaultPaymentMethod.String)
	} else {
		params.PaymentBehavior = stripeSdk.String("default_incomplete")
	}

	// If there is introductory offer, add an extra invoice
	// and trial period.
	if !ci.Introductory.IsZero() {
		params.AddInvoiceItems = []*stripeSdk.SubscriptionAddInvoiceItemParams{
			{
				Price:    stripeSdk.String(ci.Introductory.ID),
				Quantity: stripeSdk.Int64(1),
			},
		}

		params.TrialPeriodDays = stripeSdk.Int64(
			ci.Introductory.PeriodCount.TotalDays())
	}

	// {
	// "status":400,
	// "message":"Idempotent key length is 0 characters long, which is outside accepted lengths. Idempotent Keys must be 1-255 characters long. If you're looking for a decent generator, try using a UUID defined by IETF RFC 4122.",
	// "request_id":"req_O6zILK5QEVpViw",
	// "type":"idempotency_error"
	// }
	if p.IdempotencyKey != "" {
		params.SetIdempotencyKey(p.IdempotencyKey)
	}

	if p.CouponID.Valid {
		params.Coupon = stripeSdk.String(p.CouponID.String)
	}

	// Expand latest_invoice.payment_intent.
	params.AddExpand(KeyLatestInvoicePaymentIntent)

	return params
}

func (p SubsParams) UpdateSubParams(itemID string, ci reader.CartItemStripe) *stripeSdk.SubscriptionParams {

	params := &stripeSdk.SubscriptionParams{
		CancelAtPeriodEnd: stripeSdk.Bool(false),
		ProrationBehavior: stripeSdk.String(string(stripeSdk.SubscriptionProrationBehaviorCreateProrations)),
		Items: []*stripeSdk.SubscriptionItemsParams{
			{
				// Subscription item to update.
				ID: stripeSdk.String(itemID),
				// The ID of the price object.
				// When changing a subscription itemâ€™s price,
				// quantity is set to 1 unless a quantity parameter is provided.
				Price: stripeSdk.String(ci.Recurring.ID),
			},
		},
	}

	if p.DefaultPaymentMethod.Valid {
		params.DefaultPaymentMethod = stripeSdk.String(p.DefaultPaymentMethod.String)
	}

	if p.IdempotencyKey != "" {
		params.SetIdempotencyKey(p.IdempotencyKey)
	}

	if p.CouponID.Valid {
		params.Coupon = stripeSdk.String(p.CouponID.String)
	}

	// Expand latest_invoice.payment_intent.
	params.AddExpand(KeyLatestInvoicePaymentIntent)

	return params
}
