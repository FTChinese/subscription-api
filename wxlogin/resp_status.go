package wxlogin

import (
	"fmt"

	"gitlab.com/ftchinese/subscription-api/view"
)

// RespStatus is used to parse wechat error response.
// errcode: 40163, errmsg: "code been used"
// errcode: 41002, errmsg: "appid missing";
// errcode: 42001, errmsg: "access_token expired";
// errcode: 40029, errmsg: "invalid code";
// errcode: 40030, errmsg: "invalid refresh_token"
// errcode: 40003, errmsg: "invalid openid"
type RespStatus struct {
	Code    int64  `json:"errcode"`
	Message string `json:"errmsg"`
}

// ToString creates a human readable message of the RespStatus.
// Do not use the convention String() method because we do not want
// it to be used in printing and log.
func (s RespStatus) ToString() string {
	return fmt.Sprintf("%d: %s", s.Code, s.Message)
}

// HasError tests if wechat response contains error.
func (s RespStatus) HasError() bool {
	return s.Code != 0
}

// BuildReason turns Wechat error response into our standard restful response.
// This is used to tell client an error occurred and the request cannot be handled, like OAuth code is invalid, refresh_token expired, opend id is invalid.
// Errors like appid missing is not caused by client, and should not be included.
func (s RespStatus) BuildReason() *view.Reason {
	r := view.NewReason()

	switch s.Code {

	// OAuth code is either not generated by this Wechat app,
	// or is expired.
	// Client should tell user to try to relaunch the authorize process.
	case 40029:
		r.Field = "code"
		r.Code = view.CodeInvalid
		r.SetMessage(s.Message)
		return r

	// If client received this reponse, it should ask user to re-authorize.
	case 40030:
		r.Field = "refresh_token"
		r.Code = view.CodeInvalid
		r.SetMessage(s.Message)
		return r

	// If client recieved this response, it should ask user to re-authorize.
	case 40003:
		r.Field = "openId"
		r.Code = view.CodeInvalid
		r.SetMessage(s.Message)
		return r

	// Return nil does not mean no error occurred.
	default:
		r.Code = fmt.Sprintf("%d", s.Code)
		r.SetMessage(s.Message)
		return r
	}
}

// SaveWxError saves wecaht error response into database so that
// we could know  what kind of error code and message does Wechat
// actually defined.
func (env Env) SaveRespStatus(code int64, message string) error {
	query := `
	INSERT INTO user_db.wechat_error_log
	SET code = ?,
		message = ?,
		created_utc = UTC_TIMESTAMP()`

	_, err := env.DB.Exec(query,
		code,
		message,
	)

	if err != nil {
		logger.WithField("trace", "SaveWxError").Error(err)
		return err
	}

	return nil
}
